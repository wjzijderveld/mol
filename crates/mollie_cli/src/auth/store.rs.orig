<<<<<<< HEAD
use crate::config::{AccessCodeConfig, ApiKeysConfig, ConfigurationService};
use mollie_api::auth::{AccessCode, ApiKey, ApiKeyMode};
||||||| parent of c79638b (add basic OAuth client)
use super::config;
use log::{debug, info};
use mollie_api::auth::{AccessCode, ApiKey, ApiKeyMode};
=======
use super::config;
use log::{debug, info};
use mollie_api::auth::{AccessCode, ApiKey, ApiKeyMode, OAuth};
>>>>>>> c79638b (add basic OAuth client)
use requestty::Question;

pub struct Store<'config> {
    config_service: &'config dyn ConfigurationService,
}

<<<<<<< HEAD
impl<'config> Store<'config> {
    pub fn new(config: &'config dyn ConfigurationService) -> Self {
        Self {
            config_service: config,
||||||| parent of c79638b (add basic OAuth client)
pub fn api_key(api_key: &String) {
    // TODO: use result instead of expect
    let new_api_key = ApiKey::from_string(String::from(api_key)).expect("Invalid API key");

    store_api_key(new_api_key);
}

pub fn access_code(access_code: &String) {
    // TODO: use result instead of expect
    let new_access_code =
        AccessCode::from_string(String::from(access_code)).expect("Invalid access code");

    store_access_token(new_access_code);
}

fn store_access_token(new_access_code: AccessCode) {
    let old_config = config::from_file().unwrap();

    let mut new_config = old_config.clone();
    new_config.access_code = Some(new_access_code.value);

    debug!("Old config: {:?}", old_config);
    debug!("New config: {:?}", new_config);

    config::save_to_file(new_config).unwrap();

    info!("Configuration updated");
}

fn store_api_key(new_api_key: ApiKey) {
    let old_config = config::from_file().unwrap();

    let mut new_config = old_config.clone();
    match new_api_key.mode {
        ApiKeyMode::Live => {
            new_config.keys.live = Some(new_api_key.value);
        }
        ApiKeyMode::Test => {
            new_config.keys.test = Some(new_api_key.value);
=======
pub fn api_key(api_key: &String) {
    // TODO: use result instead of expect
    let new_api_key = ApiKey::from_string(String::from(api_key)).expect("Invalid API key");

    store_api_key(new_api_key);
}

pub fn store_refresh_token(refresh_token: &String) {
    // TODO: use result instead of expect
    let new_oauth = OAuth { refresh_token: refresh_token.into(), access_token: None };

    store_oauth(new_oauth);
}

pub fn access_code(access_code: &String) {
    // TODO: use result instead of expect
    let new_access_code =
        AccessCode::from_string(String::from(access_code)).expect("Invalid access code");

    store_access_token(new_access_code);
}

fn store_access_token(new_access_code: AccessCode) {
    let old_config = config::from_file().unwrap();

    let mut new_config = old_config.clone();
    new_config.access_code = Some(new_access_code.value);

    debug!("Old config: {:?}", old_config);
    debug!("New config: {:?}", new_config);

    config::save_to_file(new_config).unwrap();

    info!("Configuration updated");
}

fn store_api_key(new_api_key: ApiKey) {
    let old_config = config::from_file().unwrap();

    let mut new_config = old_config.clone();
    match new_api_key.mode {
        ApiKeyMode::Live => {
            new_config.keys.live = Some(new_api_key.value);
        }
        ApiKeyMode::Test => {
            new_config.keys.test = Some(new_api_key.value);
>>>>>>> c79638b (add basic OAuth client)
        }
    }

    pub fn interactive(&self) -> anyhow::Result<()> {
        let new_api_key = self.ask_api_key()?;
        self.store_api_key(new_api_key)
    }

    pub fn store_api_key(&self, new_api_key: ApiKey) -> anyhow::Result<()> {
        self.config_service.update(&|config| {
            let api_keys = config.auth.api_keys.get_or_insert(ApiKeysConfig::default());
            match new_api_key.mode {
                ApiKeyMode::Live => {
                    api_keys.live = Some(new_api_key.clone());
                }
                ApiKeyMode::Test => {
                    api_keys.test = Some(new_api_key.clone());
                }
            }
        })?;
        Ok(())
    }

    pub fn store_access_code(&mut self, new_access_code: AccessCode) -> anyhow::Result<()> {
        self.config_service.update(&|config| {
            config.auth.access_code = Some(AccessCodeConfig {
                token: new_access_code.clone(),
            });
        })?;
        Ok(())
    }

<<<<<<< HEAD
    fn ask_api_key(&self) -> anyhow::Result<ApiKey> {
        let question = Question::input("api_key")
            .message("Input your new API key")
            .build();
||||||| parent of c79638b (add basic OAuth client)
#[derive(Debug)]
pub struct SorryCouldNotRetrieveApiKey {
    pub error_message: String,
}
=======
fn store_oauth(oauth: OAuth) {
    let old_config = config::from_file().unwrap();

    let mut new_config = old_config.clone();
    new_config.refresh_token = Some(oauth.refresh_token);

    debug!("Old config: {:?}", old_config);
    debug!("New config: {:?}", new_config);

    config::save_to_file(new_config).unwrap();

    info!("Configuration updated");
}

#[derive(Debug)]
pub struct SorryCouldNotRetrieveApiKey {
    pub error_message: String,
}
>>>>>>> c79638b (add basic OAuth client)

        let answer = requestty::prompt_one(question)?
            .try_into_string()
            .map_err(|_| anyhow::anyhow!("Could not read API key"))?;

        Ok(ApiKey::try_from(answer)?)
    }
}
